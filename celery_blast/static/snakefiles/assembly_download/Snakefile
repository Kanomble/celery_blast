import pandas as pd
import time
import os
import sys
import django



#signal.signal(signal.SIGCHLD, signal.SIGTERM)
#signal.signal(signal.SIGCHLD, signal.SIG_WAIT)
configfile: "./snakefile_config"

def get_ftp_paths_and_taxids_from_summary_file(filename):
    dataframe = pd.read_table(filename,header=0,index_col=0,delimiter=",")
    dataframe = dataframe[dataframe['ftp_path'].duplicated() == False]
    return dataframe['ftp_path'],dataframe['species_taxid']

transform_ftp_path = lambda file: file.split('/')[-1].rstrip(file[-3:])

FTP_PATHS, TAXIDS = get_ftp_paths_and_taxids_from_summary_file(config['db_summary'])
#TODO create with pandas map function for large files!
FASTA_FILES = [transform_ftp_path(ftp_path) for ftp_path in FTP_PATHS]
DATABASES = [download+'.pdb' for download in FASTA_FILES]

rule all:
    input: FASTA_FILES, DATABASES#expand(["{database}"],database=[file+".pdb" for file in FASTA_FILES]) #
    run:
        #TITLE combined_db
        #DBLIST "prot_1_db.faa" "prot_2_db.faa"
        #print(os.environ)
        sys.path.append("/blast/reciprocal_blast")
        os.environ["DJANGO_SETTINGS_MODULE"] = "celery_blast.settings"
        print(os.environ)
        #maindir = os.getcwd()
        #sys.path.append(maindir)

        django.setup()
        #print(maindir)

        print(sys.path)
        from blast_project.models import BlastDatabase
        print(BlastDatabase.objects.all())
        raise Exception
        alias_file_name = config['db_summary']+'.database'
        alias_file=open(alias_file_name,'w')
        alias_file.write("TITLE {}\n".format(alias_file_name))
        alias_file.write("DBLIST")
        for database in FASTA_FILES:
            alias_file.write(" \""+database+"\"")
        alias_file.write("\n")
        alias_file.close()

rule download_and_decompress:
    input: config['db_summary']
    output: FASTA_FILES
    run:
        error_log=open('download_error.log','w')
        for file in FTP_PATHS:
            for attempt in range(10):
                try:
                    gunzip_output = transform_ftp_path(file)
                    #or use Popen....
                    process = shell("wget -qO- {file} | gzip -d > {gunzip_output}")
                    #process.cleanup()
                except:
                    error_log.write("{} {}\n".format(file,attempt))
                    #print("Exception occurred in download attempt : {}".format(attempt))
                else:
                    break
            else:
                error_log.close()
                raise Exception
        error_log.close()

rule format_fasta_files_to_blast_databases:
    input: FASTA_FILES#expand(["{fastafile}"],fastafile=FASTA_FILES) #FASTA_FILES#
    output: DATABASES#expand(["{database}"],database=[file+".pdb" for file in FASTA_FILES]) #DATABASES #
    run:
        error_log=open('database_formatting_error.log','w')
        for fastafile,taxid in zip(FASTA_FILES,TAXIDS):
            #print(fastafile,"\t--------->\t",taxid)
            for attempt in range(3):
                try:
                    #process = subprocess.Popen("makeblastdb -in {fastafile} -dbtype prot -out {fastafile} -taxid {taxid}",shell=True)
                    #returncode = process.wait(timeout=200)
                    #if returncode != 0:
                    #    raise Exception
                    #devnull rly necessary?
                    process = shell("makeblastdb -in {fastafile} -dbtype prot -out {fastafile} -taxid {taxid} -parse_seqids > /dev/null")
                    print("fastafile: {}\ttaxid: {}".format(fastafile,taxid))
                    #process.cleanup()
                except:
                    error_log.write("{} {}\n".format(fastafile,attempt))
                else:
                    break
            else:
                error_log.close()
                raise Exception
        error_log.close()


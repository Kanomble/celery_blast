configfile: "./snakefile_config"
ONE_WAY_BLAST_DIR = 'media/one_way_blast/'
QSEQIDS = []
with open(config['query_sequence'],'r') as qseqfile:
	for line in qseqfile.readlines():
		if ">" in line:
			#TODO adjust qseq_ids in query_sequence file in order to assign a new unique name ? - until now just refseq OR local database sequence headers are allowed
			qseq_id = line.split(" ")[0].split(">")[1].split(".")[0]
			QSEQIDS.append(qseq_id)

rule all:
	input:
		"bokeh_plot.html",
		"query_sequence_information.html",
		"query_sequence_information.csv",
		'blast_results_with_tax.table',
		expand("{qseqid}/blast_results_with_tax.table",qseqid=QSEQIDS),
		expand("{qseqid}/target_sequence_ids.txt",qseqid=QSEQIDS),

rule blast:
	input: queries=config['query_sequence']
	output: "blast_results.table"
	params: word_size=config['word_size'], e_value=config['e_value'], num_alignments=config['num_alignments'], num_threads=config['num_threads'], database=config['blastdb']
	shell:
		"blastp -db {params.database} -outfmt \"6 qseqid sseqid pident evalue bitscore slen qgi sgi sacc staxids sscinames scomnames stitle\" -out {output} -word_size {params.word_size} -evalue {params.e_value} -num_alignments {params.num_alignments} -num_threads {params.num_threads} -query {input.queries}"

rule blast_results_to_plots_and_html_table:
	input: blast_results="blast_results.table", query_file=config['query_sequence']
	params: user_email=config['user_email']
	output: bokeh_plot="bokeh_plot.html",html_table="blast_results.html", taxonomic_table='blast_results_with_tax.table'
	log:log="log/blast_results_to_plots_and_html_table.log"
	script:
		"../../../static/snakefiles/one_way_blast/blast_results_to_plots_and_html_table.py"

rule query_sequences_to_html_table:
	input: target_file=config['query_sequence']
	params: email=config['user_email']
	output: output_html="query_sequence_information.html", output_csv="query_sequence_information.csv"
	script:
		"../../../static/snakefiles/one_way_blast/query_sequences_to_html_table.py"

rule filter_blast_results_table_to_csv:
	input: results_table="blast_results_with_tax.table"
	output: result_csv=expand("{qseqid}/blast_results_with_tax.table",qseqid=QSEQIDS),
            ids=expand("{qseqid}/target_sequence_ids.txt",qseqid=QSEQIDS)
	log: log="filter_blast_results_table_to_csv.log"
	script:
		"../../../static/snakefiles/one_way_blast/filter_blast_results_table_to_csv.py"

rule extract_subject_sequences_from_database:
	input: "{qseqid}/target_sequence_ids.txt"
	output: "{qseqid}/target_sequences.faa"
	params: database=config["blastdb"]
	log: "log/{qseqid}/extract_subject_sequences_from_database.log"
	run:
	    with open(input[0], 'r') as infile:
	        if len(infile.readlines()) > 1:
	            shell("blastdbcmd -db {params.database} -entry_batch {input} -out {output} 2> {log}")
	        else:
	            shell("touch {output} 2> {log}")

rule conduct_multiple_sequence_alignment_mafft:
	input: "{qseqid}/target_sequences.faa"
	output: "{qseqid}/target_sequences.msa"
	log:"log/{qseqid}/conduct_multiple_sequence_alignment_mafft.log"
	run:
		switch = False
		with open(input[0],'r') as infile:
			if len(infile.readlines()) > 1:
				switch = True
			if switch:
				shell("mafft --auto {input} > {output} 2> {log}")
			else:
				shell("touch {output} 2> {log}")

rule trimal:
	input: target_msa="{qseqid}/target_sequences.msa", multiple_sequence_alignment_log="log/{qseqid}/msa.log"
	output: trimmed_sequences="{qseqid}/target_sequences_trimmed.msa"
	log: trimal_log="log/{qseqid}/trimal.log"
	shell:
		"trimal -in {input.target_msa} -out {output.trimmed_sequences} -gt 0.8 -st 0.001 -cons 60 2> {log.trimal_log}"

rule display_alignment:
	input: trimmed_sequences="{qseqid}/target_sequences_trimmed.msa"
	output: html_output="{qseqid}/target_sequences_trimmed.html"
	log: display_alignment_log="log/{qseqid}/mview.log"
	shell:
		"mview -in fasta -html head -moltype aa -css on -coloring any -consensus on -sort cov {input.trimmed_sequences} > {output.html_output} 2> {log.display_alignment_log}"

rule conduct_phylogeny_fast_tree:
    input: "{qseqid}/target_sequences_trimmed.msa"
    output: "{qseqid}/target_sequences.tree"
    log: "log/{qseqid}/conduct_phylogeny_fast_tree.log"
    run:
        with open(input[0],"r") as infile:
            if len(infile.readlines()) > 1:
                shell("fasttree {input} > {output} 2> {log}")
            else:
                shell("touch {output} 2> {log}")

rule html_phylogenie:
	input: newick_tree="{qseqid}/target_sequences.tree", blast_table="{qseqid}/rbh_table.tsf"
	output: html_tree="{qseqid}/target_sequences_tree.html"
	log: shiptv_log="log/{qseqid}/shiptv.log"
	shell:
		"shiptv --newick {input.newick_tree} --metadata {input.blast_table} --output-html {output.html_tree} 2> {log.shiptv_log}"